{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos PyCon 2025","text":""},{"location":"#enfocate-en-el-codigo-olvidate-de-administrar-servidores","title":"\ud83d\ude80 Enf\u00f3cate en el c\u00f3digo, olv\u00eddate de administrar servidores","text":"<p>En este taller vamos a escribir c\u00f3digo en Python utilizando herramientas Serverless y vamos a desplegar APIs en la nube de AWS, sin la necesidad de gestionar la infraestructura.</p>"},{"location":"#objetivo-del-taller","title":"\ud83c\udfaf Objetivo del taller","text":"<p>Aprender a desarrollar y desplegar APIs modernas utilizando:</p> <ul> <li>\ud83d\udc0d Python</li> <li>\u2699\ufe0f Tecnolog\u00edas de desarrollo Serverless</li> <li>\u2601\ufe0f Servicios serverless de AWS como Lambda, API Gateway, DynamoDB, entre otros.</li> </ul>"},{"location":"#al-finalizar-el-taller-podras","title":"Al finalizar el taller podr\u00e1s:","text":"<ul> <li>\u2705 Comprender los fundamentos de la arquitectura serverless.</li> <li>\u2705 Utilizar al menos una tecnolog\u00eda Serverless para automatizar el despliegue de funciones Lambda.</li> <li>\u2705 Dise\u00f1ar y consumir APIs RESTful usando Python + API Gateway.</li> <li>\u2705 Aplicar buenas pr\u00e1cticas en desarrollo, pruebas y CI/CD.</li> </ul>"},{"location":"#a-quien-va-dirigido","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u00bfA qui\u00e9n va dirigido?","text":"<p>Este taller es ideal para:</p> <ul> <li>Desarrolladores con conocimientos b\u00e1sicos o intermedios de Python.</li> <li>Personas interesadas en construir backends eficientes, escalables y econ\u00f3micos.</li> <li>Equipos que buscan adoptar arquitecturas modernas basadas en eventos.</li> </ul> <p>\ud83d\udca1 Tip: No necesitas experiencia previa en AWS para comenzar, pero s\u00ed te ser\u00e1 \u00fatil estar familiarizado con la terminal y conceptos b\u00e1sicos de APIs.</p>"},{"location":"aws-sam-instalacion/","title":"Instalaci\u00f3n de AWS SAM (Serverless Application Model)","text":"<p>AWS SAM es un framework de infraestructura como c\u00f3digo (IaC) que permite desarrollar, probar y desplegar aplicaciones serverless en AWS de manera estructurada y sencilla.</p>"},{"location":"aws-sam-instalacion/#requisitos-previos","title":"Requisitos previos","text":"<p>Antes de instalar AWS SAM CLI, aseg\u00farate de tener lo siguiente:</p> <ul> <li>\u2705 Cuenta de AWS y credenciales configuradas (<code>aws configure</code>)</li> <li>\u2705 AWS CLI instalado  </li> <li>\u2705 Docker instalado (requerido para pruebas locales)</li> <li>\u2705 Git (opcional pero recomendado)</li> </ul>"},{"location":"aws-sam-instalacion/#1-instalar-la-cli-de-aws-sam","title":"1. Instalar la CLI de AWS SAM","text":""},{"location":"aws-sam-instalacion/#en-linux","title":"En Linux","text":"<pre><code># Descargar la \u00faltima versi\u00f3n\nwget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip\n\n# Descomprimir\nunzip aws-sam-cli-linux-x86_64.zip -d sam-installation\n\n# Instalar\nsudo ./sam-installation/install\n</code></pre>"},{"location":"aws-sam-instalacion/#en-macos","title":"En macOS","text":"<p>Si usas Homebrew:</p> <pre><code>brew tap aws/tap\nbrew install aws-sam-cli\n</code></pre>"},{"location":"aws-sam-instalacion/#en-windows","title":"En Windows","text":"<ol> <li> <p>Descarga el instalador desde:    https://github.com/aws/aws-sam-cli/releases/latest</p> </li> <li> <p>Ejecuta el instalador <code>.exe</code> y sigue los pasos.</p> </li> </ol>"},{"location":"aws-sam-instalacion/#2-verificar-instalacion","title":"2. Verificar instalaci\u00f3n","text":"<pre><code>sam --version\n</code></pre> <p>Ejemplo de salida:</p> <pre><code>SAM CLI, version 1.108.0\n</code></pre>"},{"location":"aws-sam-instalacion/#3-crear-un-nuevo-proyecto","title":"3. Crear un nuevo proyecto","text":"<pre><code>sam init\n</code></pre> <p>Luego sigue el asistente para:</p> <ul> <li>Elegir el runtime (por ejemplo: Python 3.12)</li> <li>Plantilla de ejemplo</li> <li>Nombre del proyecto</li> </ul> <p>Estructura generada:</p> <pre><code>mi-app/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 template.yaml\n\u251c\u2500\u2500 events/\n\u251c\u2500\u2500 hello_world/\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests/\n</code></pre>"},{"location":"aws-sam-instalacion/#4-ejecutar-localmente-requiere-docker","title":"4. Ejecutar localmente (requiere Docker)","text":"<pre><code>sam local start-api\n</code></pre> <p>La API estar\u00e1 disponible en: <code>http://127.0.0.1:3000/hello</code></p>"},{"location":"aws-sam-instalacion/#5-desplegar-la-aplicacion","title":"5. Desplegar la aplicaci\u00f3n","text":"<p>Primero empaqueta el proyecto:</p> <pre><code>sam build\n</code></pre> <p>Luego despliega:</p> <pre><code>sam deploy --guided\n</code></pre> <p>Esto crear\u00e1 un archivo <code>samconfig.toml</code> con tus configuraciones.</p>"},{"location":"aws-sam-instalacion/#6-eliminar-los-recursos-de-aws","title":"6. Eliminar los recursos de AWS","text":"<p>Para eliminar lo desplegado:</p> <pre><code>aws cloudformation delete-stack --stack-name nombre-del-stack\n</code></pre>"},{"location":"aws-sam/","title":"\ud83d\udce6 \u00bfQu\u00e9 es AWS SAM?","text":"<p>AWS SAM (Serverless Application Model) es un framework de infraestructura como c\u00f3digo (IaC) que te permite definir, probar y desplegar aplicaciones serverless en AWS de forma estructurada y automatizada, usando archivos YAML.</p> <p>Piensa en SAM como una forma declarativa de describir:</p> <ul> <li>\ud83d\udd01 Funciones Lambda</li> <li>\ud83c\udf10 APIs (API Gateway)</li> <li>\ud83d\uddc4\ufe0f Bases de datos (DynamoDB)</li> <li>\ud83d\udd10 Permisos (IAM Roles/Policies)</li> </ul> <p>Todo desde un solo archivo YAML.</p>"},{"location":"aws-sam/#caracteristicas-clave","title":"\u2728 Caracter\u00edsticas clave","text":"<ul> <li> <p>\ud83e\uddf1 Basado en AWS CloudFormation   Usa su robustez, pero con una sintaxis m\u00e1s simple enfocada en recursos serverless.</p> </li> <li> <p>\ud83d\udc33 Pruebas locales con Docker   Ejecuta y depura funciones Lambda localmente con <code>sam local</code>.</p> </li> <li> <p>\ud83d\udd01 Compatible con CI/CD   Integra f\u00e1cilmente con GitHub Actions, AWS CodePipeline, GitLab CI, Jenkins, entre otros.</p> </li> <li> <p>\u2699\ufe0f Flujo t\u00edpico CI/CD   ```text   build \u2192 test \u2192 deploy</p> </li> </ul>"},{"location":"aws-sam/#sam-requiere-docker","title":"\u00bfSAM requiere Docker?","text":"<p>S\u00ed, si quieres usar sam local para probar tus funciones, necesitas tener Docker instalado y en ejecuci\u00f3n, ya que SAM simula el entorno real de Lambda dentro de un contenedor local.</p> <p><pre><code>sam local start-api\n</code></pre> Levanta una versi\u00f3n local de tu API Gateway + Lambda en http://localhost:3000.</p>"},{"location":"aws-sam/#flujo-cicd-tipico-con-sam","title":"\ud83d\udd04 Flujo CI/CD t\u00edpico con SAM","text":"<p>!!! note \"Resumen del flujo\"     Este es el ciclo b\u00e1sico para desarrollar, probar y desplegar una aplicaci\u00f3n serverless con SAM:</p> <pre><code>graph TD\n  A[Escribes c\u00f3digo + YAML] --&gt; B[sam build]\n  B --&gt; C[sam local invoke o start-api]\n  C --&gt; D[sam deploy --guided]\n  D --&gt; E[Aplicaci\u00f3n desplegada en AWS]</code></pre> <p>En pipelines automatizados, puedes hacer: <pre><code>sam build\nsam deploy --no-confirm-changeset --no-fail-on-empty-changeset\n</code></pre></p> <p>Esto se puede integrar con:</p> <ul> <li>GitHub Actions</li> <li>AWS CodeBuild + CodePipeline</li> <li>GitLab CI/CD</li> </ul>"},{"location":"aws-sam/#ejemplo-de-plantilla-templateyaml-sam-yaml","title":"Ejemplo de plantilla template.yaml (SAM YAML)","text":"<p><pre><code>AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: API simple con SAM + Python\n\nResources:\n  HelloFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: hello/\n      Handler: app.lambda_handler\n      Runtime: python3.11\n      Events:\n        HelloApi:\n          Type: Api\n          Properties:\n            Path: /hello\n            Method: get\n</code></pre> Este ejemplo crea una funci\u00f3n Lambda en Python que se activa v\u00eda una llamada HTTP GET /hello.</p>"},{"location":"aws-sam/#despliegue-rapido","title":"Despliegue r\u00e1pido","text":"<p><pre><code>sam build\nsam deploy --guided\n</code></pre> Esto empaqueta el c\u00f3digo, te pide una configuraci\u00f3n inicial (regi\u00f3n, bucket de despliegue, etc.), y sube tu aplicaci\u00f3n a AWS.</p>"},{"location":"aws-setup/","title":"Cuenta AWS","text":"<p>\ud83d\udd11 \u00bfD\u00f3nde encontrar o generar las claves de acceso (Access Key ID y Secret Access Key)?</p> <p>Ir a IAM (Identity and Access Management):</p> <ol> <li> <p>Desde la consola de AWS, busca el servicio \"IAM\" en la barra de b\u00fasqueda.</p> </li> <li> <p>Seleccionar \"Usuarios\" (Users) en el men\u00fa lateral izquierdo.</p> </li> <li> <p>Seleccionar el usuario con el que deseas trabajar (debe tener permisos program\u00e1ticos habilitados).</p> </li> <li> <p>Ir a la pesta\u00f1a \"Credenciales de seguridad\" (Security credentials).</p> </li> <li> <p>En la secci\u00f3n \"Claves de acceso\" (Access keys), hacer clic en \"Crear clave de acceso\" (Create access key) si no existe una.</p> </li> </ol> <p>\ud83d\udd10 Se mostrar\u00e1:</p> <p>Access Key ID</p> <p>Secret Access Key (solo una vez, \u00a1gu\u00e1rdalo en un lugar seguro!)</p>"},{"location":"aws-setup/#aws-configuracion-de-credenciales","title":"AWS Configuraci\u00f3n de credenciales","text":"<pre><code>aws configure\n# enter AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, region\n</code></pre>"},{"location":"aws-setup/#ingresar-los-datos-requeridos","title":"Ingresar los datos requeridos","text":"<pre><code>AWS Access Key ID [None]: TU_ACCESS_KEY\nAWS Secret Access Key [None]: TU_SECRET_KEY\nDefault region name [None]: us-east-1\nDefault output format [None]: json\n</code></pre> <p>Esto crea el archivo de configuraci\u00f3n en:</p> <p>Linux/macOS/WSL2: ~/.aws/credentials y ~/.aws/config</p>"},{"location":"aws-setup/#estructura-de-los-archivos-generados","title":"Estructura de los archivos generados","text":"<p>~/.aws/credentials</p> <pre><code>[default]\naws_access_key_id = TU_ACCESS_KEY\naws_secret_access_key = TU_SECRET_KEY\n</code></pre> <p>~/.aws/config</p> <pre><code>[default]\nregion = us-east-1\noutput = json\n</code></pre> <p>Verificar conexi\u00f3n a AWS</p> <p>Ejecuta un comando b\u00e1sico como prueba:</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>Salida esperada:</p> <pre><code>{\n    \"UserId\": \"AIDXXXXXXXXXXXXXXX\",\n    \"Account\": \"123456789012\",\n    \"Arn\": \"arn:aws:iam::123456789012:user/tu-usuario\"\n}\n</code></pre>"},{"location":"aws-setup/#perfiles-adicionales-opcional","title":"Perfiles adicionales (opcional)","text":"<p>Puedes agregar m\u00faltiples perfiles editando los archivos manualmente:</p> <p>~/.aws/credentials</p> <pre><code>[default]\naws_access_key_id = TU_ACCESS_KEY\naws_secret_access_key = TU_SECRET_KEY\n\n[perfil-dev]\naws_access_key_id = TU_DEV_ACCESS_KEY\naws_secret_access_key = TU_DEV_SECRET_KEY\n</code></pre> <pre><code>[default]\nregion = us-east-1\noutput = json\n\n[profile perfil-dev]\nregion = us-west-2\noutput = yaml\n</code></pre>"},{"location":"aws-setup/#notas-adicionales","title":"Notas adicionales","text":"<ul> <li> <p>Para usar el entorno WSL2, aseg\u00farate de que el subsistema tenga acceso a internet.</p> </li> <li> <p>Si usas zsh o fish, aseg\u00farate de que $HOME/.aws est\u00e9 correctamente accesible.</p> </li> <li> <p>Puedes usar variables de entorno en lugar de archivos de configuraci\u00f3n:</p> </li> </ul> <pre><code>export AWS_ACCESS_KEY_ID=TU_ACCESS_KEY\nexport AWS_SECRET_ACCESS_KEY=TU_SECRET_KEY\nexport AWS_DEFAULT_REGION=us-east-1\n</code></pre>"},{"location":"buenas-practicas/","title":"Buenas pr\u00e1cticas y seguridad","text":""},{"location":"buenas-practicas/#buenas-practicasmd","title":"\ud83d\udcc1 <code>buenas-practicas.md</code>","text":""},{"location":"buenas-practicas/#buenas-practicas-en-desarrollo-de-apis-serverless","title":"Buenas pr\u00e1cticas en desarrollo de APIs Serverless","text":"<p>Aplica estas recomendaciones para mejorar la calidad, mantenibilidad y seguridad de tus APIs.</p>"},{"location":"buenas-practicas/#1-organizacion-del-codigo","title":"1. Organizaci\u00f3n del c\u00f3digo","text":"<ul> <li>Sigue una estructura clara: <code>app/</code>, <code>handlers/</code>, <code>utils/</code></li> <li>Usa <code>requirements.txt</code> o <code>pyproject.toml</code> bien definidos</li> </ul>"},{"location":"buenas-practicas/#2-uso-de-entornos-separados","title":"2. Uso de entornos separados","text":"<ul> <li>Desarrollo</li> <li>Pruebas</li> <li>Producci\u00f3n</li> </ul> <p>Utiliza variables de entorno y perfiles de AWS para aislar entornos.</p>"},{"location":"buenas-practicas/#3-manejo-de-errores","title":"3. Manejo de errores","text":"<ul> <li>Usa <code>try/except</code> con logging claro</li> <li>Retorna errores HTTP adecuados (400, 404, 500)</li> </ul>"},{"location":"buenas-practicas/#4-seguridad","title":"4. Seguridad","text":"<ul> <li>Nunca subas tus claves de acceso a un repositorio</li> <li>Utiliza variables de entorno .env para desarrollo</li> <li>Usa AWS Secrets Manager o Parameter Store</li> <li>Restringe los permisos de los roles Lambda</li> </ul>"},{"location":"buenas-practicas/#5-optimizacion","title":"5. Optimizaci\u00f3n","text":"<ul> <li>Ajusta la memoria y tiempo de ejecuci\u00f3n seg\u00fan el uso</li> <li>Evita dependencias innecesarias</li> <li>Utiliza versiones ligeras de librer\u00edas (por ejemplo, <code>boto3-lite</code>)</li> </ul>"},{"location":"buenas-practicas/#6-versionado-y-despliegue","title":"6. Versionado y despliegue","text":"<ul> <li>Usa Git y CI/CD para automatizar despliegues</li> <li>Versiona tus funciones</li> </ul>"},{"location":"casosdeuso/","title":"\ud83e\udde9 Casos de uso ideales de Python con AWS Serverless","text":""},{"location":"casosdeuso/#apis-rest-o-graphql-ligeras","title":"\ud83d\udd17 APIs REST o GraphQL ligeras","text":"<p>Crea APIs backend completamente sin servidores usando:</p> <ul> <li>AWS Lambda + API Gateway</li> <li>Frameworks como:</li> <li>AWS Chalice</li> <li>FastAPI + Serverless Framework</li> <li>AWS SAM</li> </ul> <p>Ideal para: - Prototipos r\u00e1pidos - MVPs funcionales - Microservicios desacoplados</p>"},{"location":"casosdeuso/#automatizacion-y-tareas-programadas","title":"\u23f1\ufe0f Automatizaci\u00f3n y tareas programadas","text":"<p>Ejecuta scripts Python en momentos definidos usando Amazon EventBridge o expresiones <code>cron</code>.</p> <p>Ejemplos de tareas automatizadas:</p> <ul> <li>\ud83d\udce8 Enviar reportes diarios</li> <li>\ud83e\uddf9 Limpieza de datos peri\u00f3dica</li> <li>\ud83d\udd04 Sincronizaci\u00f3n entre sistemas externos</li> </ul> <p>Puedes usar el evento <code>schedule</code> de Serverless Framework para definir tareas recurrentes con sintaxis tipo cron.</p>"},{"location":"casosdeuso/#procesamiento-orientado-a-eventos","title":"\u26a1 Procesamiento orientado a eventos","text":"<p>Responde autom\u00e1ticamente a eventos generados por otros servicios AWS:</p> <ul> <li>\ud83d\uddc2\ufe0f S3: procesamiento inmediato al subir archivos</li> <li>\ud83d\udcc8 DynamoDB Streams: captura y transforma datos cuando cambian</li> <li>\ud83d\udce9 SNS / SQS: procesa mensajes en colas y notificaciones</li> </ul>"},{"location":"casosdeuso/#procesamiento-de-archivos-y-datos","title":"\ud83e\uddee Procesamiento de archivos y datos","text":"<p>Realiza tareas comunes como:</p> <ul> <li>\ud83d\uddbc\ufe0f Convertir im\u00e1genes (<code>Pillow</code>)</li> <li>\ud83d\udcca Analizar CSVs y Excel (<code>Pandas</code>)</li> <li>\ud83d\udcc4 Generar y unir PDFs (<code>PyPDF2</code>)</li> <li>\ud83d\udd04 Transformar formatos JSON, XML, YAML</li> </ul> <p>Python es ideal por su ecosistema rico de librer\u00edas de datos y su facilidad para manipular estructuras complejas.</p>"},{"location":"casosdeuso/#integracion-con-ia-ml-ligera","title":"\ud83e\udd16 Integraci\u00f3n con IA / ML ligera","text":"<p>Ejecuta inferencias de modelos previamente entrenados directamente desde Lambda.</p> <p>Opciones:</p> <ul> <li>Modelos livianos (scikit-learn, ONNX, XGBoost) empaquetados en la funci\u00f3n Lambda</li> <li>Llamadas desde Lambda a un endpoint de SageMaker para inferencia remota</li> <li>Bedrock</li> </ul> <p>Lambda es ideal para IA/ML cuando necesitas respuestas r\u00e1pidas y no procesamiento intensivo &gt; (entrenamiento).</p>"},{"location":"casosdeuso/#chatbots-y-asistentes-virtuales","title":"\ud83d\udcac Chatbots y asistentes virtuales","text":"<p>Usa Python como backend l\u00f3gico para bots conectados a:</p> <ul> <li>\ud83d\udde3\ufe0f Alexa Skills</li> <li>\ud83d\udcac Telegram, Slack, WhatsApp</li> </ul> <p>Lambda puede:</p> <ul> <li>Manejar mensajes y comandos</li> <li>Consultar o guardar contexto en DynamoDB</li> <li>Enviar respuestas autom\u00e1ticas</li> </ul>"},{"location":"casosdeuso/#notificaciones-y-webhooks","title":"\ud83d\udd14 Notificaciones y webhooks","text":"<p>Procesa webhooks entrantes desde servicios como:</p> <ul> <li>\ud83e\uddfe Stripe</li> <li>\ud83d\udee0\ufe0f GitHub</li> <li>\ud83d\udce8 Mailgun, Twilio, Zapier, etc.</li> </ul> <p>Lambda + Python permite parsear, validar y responder r\u00e1pidamente con datos en formato JSON.</p>"},{"location":"casosdeuso/#aplicaciones-backend-sin-estado","title":"\ud83e\udde0 Aplicaciones backend sin estado","text":"<p>Ejecuta cualquier l\u00f3gica backend donde no se requiera mantener sesiones o conexiones abiertas.</p> <p>Ejemplos:</p> <ul> <li>Validaciones de formularios</li> <li>Procesamiento de eventos aislados</li> <li>Funciones de negocio independientes</li> </ul> <p>Serverless es ideal cuando el backend no necesita guardar \"estado\" entre ejecuciones. Cada funci\u00f3n es ef\u00edmera y autocontenida.</p>"},{"location":"chalice/","title":"Instalaci\u00f3n, configuraci\u00f3n y despliegue","text":""},{"location":"chalice/#que-es-chalice","title":"\u00bfQu\u00e9 es Chalice?","text":"<p>AWS Chalice es un microframework de Python desarrollado por Amazon para crear y desplegar r\u00e1pidamente APIs RESTful, funciones Lambda, y event-driven apps sobre AWS Serverless.</p> <ul> <li>Similar a Flask, pero dise\u00f1ado para trabajar directamente con AWS Lambda y API Gateway.</li> </ul>"},{"location":"chalice/#ventajas","title":"Ventajas","text":"<ul> <li>\ud83c\udfaf Simplicidad Sintaxis muy parecida a Flask, ideal para Pythonistas</li> <li>\u26a1 Despliegue r\u00e1pido   Una sola l\u00ednea despliega todo (chalice deploy)</li> <li>\ud83d\udd17 Integraci\u00f3n directa con AWS Crea autom\u00e1ticamente Lambda + API Gateway</li> <li>\ud83e\uddea Soporte local   Prueba funciones localmente (chalice local)</li> <li> <p>\ud83d\udcc2 Estructura m\u00ednima   No necesitas definir manualmente archivos de infraestructura (yaml)</p> </li> <li> <p>AWS Chalice es un framework de Python que permite crear y desplegar aplicaciones Serverless utilizando AWS Lambda y API Gateway de forma sencilla.</p> </li> </ul>"},{"location":"chalice/#requisitos-previos","title":"Requisitos previos","text":"<p>Antes de instalar Chalice, aseg\u00farate de tener instalado lo siguiente:</p> <ul> <li> <p>\u2705 Python 3.7 o superior</p> </li> <li> <p>\u2705 pip (el gestor de paquetes de Python)</p> </li> <li> <p>\u2705 Una cuenta de AWS (capa libre) con credenciales configuradas (aws configure)</p> </li> <li> <p>\u2705 Git (opcional, pero recomendado)</p> </li> </ul>"},{"location":"chalice/#crear-un-entorno-virtual-opcional-pero-recomendado","title":"Crear un entorno virtual (opcional, pero recomendado)","text":"<pre><code>python3 -m venv .venv\nuv venv #si deseas usar uv\nsource .venv/bin/activate  # En Linux o macOS\n.venv\\Scripts\\activate     # En Windows\n</code></pre>"},{"location":"chalice/#instalar-chalice","title":"Instalar Chalice","text":"<p><pre><code>pip install chalice\n</code></pre> - Verificar instalaci\u00f3n <pre><code>chalice --version\n</code></pre></p>"},{"location":"chalice/#configurar-tus-credenciales-de-aws","title":"Configurar tus credenciales de AWS","text":"<pre><code>aws configure\n</code></pre> <p>Y proporciona:</p> <ul> <li> <p>Access Key ID</p> </li> <li> <p>Secret Access Key</p> </li> <li> <p>Regi\u00f3n predeterminada (por ejemplo: us-east-1)</p> </li> <li> <p>Formato de salida (puedes dejarlo en blanco o usar json)</p> </li> </ul>"},{"location":"chalice/#comando-para-iniciar-chalice-new-project","title":"Comando para iniciar (chalice new-project)","text":"<p><pre><code>chalice new-project myapi\ncd myapi\n</code></pre> Esto crea una estructura m\u00ednima: <pre><code>myapi/\n\u251c\u2500\u2500 .chalice/          # Configuraci\u00f3n AWS y stages\n\u251c\u2500\u2500 app.py             # Tu aplicaci\u00f3n (punto de entrada)\n\u2514\u2500\u2500 requirements.txt   # Dependencias\n</code></pre></p>"},{"location":"chalice/#ejemplo-basico-con-1-endpoint","title":"Ejemplo b\u00e1sico con 1 endpoint","text":"<pre><code>from chalice import Chalice\n\napp = Chalice(app_name='myapi')\n\n@app.route('/')\ndef index():\n    return {'message': 'Hola Pycon Colombia 2025'}\n</code></pre>"},{"location":"chalice/#instrucciones-para-probar-local-o-desplegar","title":"Instrucciones para probar local o desplegar","text":""},{"location":"chalice/#ejecutar-localmente-localhost8000","title":"Ejecutar localmente (localhost:8000)","text":"<p><pre><code>chalice local\n</code></pre> Abre en tu navegador: http://localhost:8000/</p>"},{"location":"chalice/#puedes-asignar-puerto","title":"Puedes asignar puerto","text":"<pre><code>chalice local --port 8080\n</code></pre>"},{"location":"chalice/#desplegar-en-aws","title":"Desplegar en AWS","text":"<pre><code>chalice deploy\n</code></pre>"},{"location":"chalice/#interactuando-via-payload","title":"Interactuando v\u00eda payload","text":"<pre><code>from chalice import Chalice\n\napp = Chalice(app_name='hello-api')\n\n@app.route('/greet', methods=['POST'], content_types=['application/json'])\ndef greet_user():\n    request = app.current_request\n    body = request.json_body\n    name = body.get('name', 'Stranger')\n    return {\"message\": f\"Hello, how are you {name}?\"}\n\n\n# The view function above will return {\"hello\": \"world\"}\n# whenever you make an HTTP GET request to '/'.\n#\n# Here are a few more examples:\n#\n# @app.route('/hello/{name}')\n# def hello_name(name):\n#    # '/hello/james' -&gt; {\"hello\": \"james\"}\n#    return {'hello': name}\n#\n# @app.route('/users', methods=['POST'])\n# def create_user():\n#     # This is the JSON body the user sent in their POST request.\n#     user_as_json = app.current_request.json_body\n#     # We'll echo the json body back to the user in a 'user' key.\n#     return {'user': user_as_json}\n#    \n# curl curl -X POST https://b4xrfemfr2.execute-api.us-west-1.amazonaws.com/api/greet \\\n#   -H \"Content-Type: application/json\" \\\n#   -d '{\"name\": \"ITPython\"}'\n#\n# curl -X POST http://localhost:8000/greet \\\n#   -H \"Content-Type: application/json\" \\\n#   -d '{\"name\": \"ITPy\"}'\n#\n</code></pre>"},{"location":"comparativa/","title":"Comparativa de frameworks","text":""},{"location":"comparativa/#tabla-comparativa-chalice-vs-framework-vs-sam","title":"Tabla comparativa (Chalice vs Framework vs SAM)","text":""},{"location":"comparativa/#comparativa-chalice-vs-sam-vs-serverless-framework","title":"\ud83d\udcca Comparativa: Chalice vs SAM vs Serverless Framework","text":"Caracter\u00edstica AWS Chalice \ud83d\udc0d AWS SAM \ud83d\udce6 Serverless Framework \u2699\ufe0f Lenguaje principal Python Multilenguaje (YAML + Python) Multilenguaje Complejidad Baja Media Media-Alta IaC (infraestructura como c\u00f3digo) Parcial (autom\u00e1tica) Completa (YAML + CFN) Completa (<code>serverless.yml</code>) Despliegue simple \u2705 <code>chalice deploy</code> \u2705 <code>sam deploy --guided</code> \u2705 <code>sls deploy</code> Pruebas locales \u2705 <code>chalice local</code> \u2705 <code>sam local</code> (con Docker) Requiere plugins Multi-cloud \u274c Solo AWS \u274c Solo AWS \u2705 AWS, Azure, GCP Comunidad y soporte Media Alta (AWS oficial) Muy alta (activa) Ideal para... Prototipos, MVPs Flujo CI/CD en AWS Apps grandes, complejas"},{"location":"comparativa/#cuando-usar-cada-uno","title":"\u00bfCu\u00e1ndo usar cada uno?","text":""},{"location":"comparativa/#chalice","title":"\ud83d\ude80 Chalice","text":"<ul> <li>Ideal si trabajas solo con Python.</li> <li>Perfecto para prototipos r\u00e1pidos o APIs peque\u00f1as.</li> <li>Muy f\u00e1cil de aprender y usar.</li> <li>Opinado y limitado: menos flexible que otros frameworks.</li> </ul> <p>\u2705 \u00dasalo si quieres rapidez y simplicidad para construir y probar funciones Lambda en minutos.</p>"},{"location":"comparativa/#aws-sam-serverless-application-model","title":"\ud83e\uddf0 AWS SAM (Serverless Application Model)","text":"<ul> <li>Herramienta oficial de AWS.</li> <li>Ofrece control total sobre el despliegue y configuraci\u00f3n.</li> <li>Se integra bien con CloudFormation, IAM, CI/CD y CodePipeline.</li> <li>M\u00e1s detallado y robusto, pero tambi\u00e9n m\u00e1s complejo.</li> </ul> <p>\u2705 \u00dasalo si trabajas exclusivamente en AWS y necesitas una herramienta poderosa para proyectos profesionales y complejos.</p>"},{"location":"comparativa/#serverless-framework","title":"\ud83c\udf10 Serverless Framework","text":"<ul> <li>Framework multi-nube (AWS, Azure, GCP).</li> <li>Soporta plugins, extensiones y infraestructura como c\u00f3digo.</li> <li>Excelente para equipos que buscan escalabilidad, organizaci\u00f3n modular y despliegues integrados.</li> <li>Amplia comunidad y documentaci\u00f3n.</li> </ul> <p>\u2705 \u00dasalo si necesitas flexibilidad, plugins personalizados o si tu equipo trabaja con distintas nubes o entornos complejos.</p>"},{"location":"comparativa/#conclusion-rapida","title":"\ud83d\udccc Conclusi\u00f3n r\u00e1pida","text":"Herramienta Nivel de complejidad Ideal para Chalice \ud83d\udfe2 Bajo Prototipos r\u00e1pidos con solo Python AWS SAM \ud83d\udfe1 Medio Control total en proyectos AWS avanzados Serverless Framework \ud83d\udd35 Medio-Alto Flexibilidad multi-nube y arquitecturas serias"},{"location":"comparativa/#pros-y-contras-en-puntos-clave","title":"Pros y contras en puntos clave","text":""},{"location":"diagramaPythonServerless/","title":"Diagrama general","text":""},{"location":"diagramaPythonServerless/#diagrama-flujo-python-aws-serverless","title":"Diagrama: Flujo Python + AWS Serverless","text":"<pre><code>graph TD\n  A[Inicio] --&gt; B[API Gateway]\n  B --&gt; C[Lambda]\n  C --&gt; D[DynamoDB]\n  C --&gt; E[Respuesta]</code></pre>"},{"location":"glosario/","title":"Glosario de t\u00e9rminos Serverless","text":"<p>Lista de t\u00e9rminos y conceptos clave usados en el taller.</p>"},{"location":"glosario/#aws-lambda","title":"AWS Lambda","text":"<p>Servicio de c\u00f3mputo que ejecuta c\u00f3digo sin necesidad de administrar servidores.</p>"},{"location":"glosario/#api-gateway","title":"API Gateway","text":"<p>Servicio de AWS para exponer APIs REST o HTTP p\u00fablicas.</p>"},{"location":"glosario/#cloudwatch","title":"CloudWatch","text":"<p>Sistema de monitoreo y logging de AWS.</p>"},{"location":"glosario/#iam","title":"IAM","text":"<p>(AWS Identity and Access Management) Sistema de control de acceso a servicios AWS.</p>"},{"location":"glosario/#chalice","title":"Chalice","text":"<p>Framework de AWS para crear y desplegar APIs Serverless con Python f\u00e1cilmente.</p>"},{"location":"glosario/#aws-sam","title":"AWS SAM","text":"<p>(Serverless Application Model) Framework de infraestructura como c\u00f3digo para crear funciones Lambda.</p>"},{"location":"glosario/#serverless-framework","title":"Serverless Framework","text":"<p>Herramienta de c\u00f3digo abierto para desplegar funciones Serverless en m\u00faltiples proveedores (AWS, Azure, etc.).</p>"},{"location":"glosario/#s3","title":"S3","text":"<p>Servicio de almacenamiento de objetos en la nube de AWS.</p>"},{"location":"glosario/#event-driven","title":"Event-driven","text":"<p>Modelo donde el c\u00f3digo se ejecuta en respuesta a eventos (como HTTP, S3, colas, etc.).</p>"},{"location":"glosario/#cold-start","title":"Cold Start","text":"<p>Tiempo de inicio inicial cuando una funci\u00f3n Lambda es invocada por primera vez tras un per\u00edodo de inactividad.</p>"},{"location":"instalacion-uv/","title":"Instalaci\u00f3n de <code>uv</code> para entornos virtuales en Python","text":"<p><code>uv</code> es una herramienta r\u00e1pida y moderna para gestionar entornos virtuales y dependencias en proyectos Python. Puede reemplazar a <code>venv</code> y <code>pip</code> con mejor rendimiento y caracter\u00edsticas adicionales.</p>"},{"location":"instalacion-uv/#requisitos-previos","title":"\ud83d\udd27 Requisitos previos","text":"<ul> <li>Tener Python 3.8 o superior instalado</li> <li>Acceso a terminal (Linux/macOS) o PowerShell (Windows)</li> </ul>"},{"location":"instalacion-uv/#linux","title":"\ud83d\udcbb Linux","text":"<pre><code>curl -Ls https://astral.sh/uv/install.sh | bash\n</code></pre> <p>Esto instalar\u00e1 <code>uv</code> en tu sistema y lo ubicar\u00e1 en <code>~/.cargo/bin</code> o <code>/usr/local/bin</code>.</p> <p>Verifica la instalaci\u00f3n:</p> <pre><code>uv --version\n</code></pre>"},{"location":"instalacion-uv/#macos","title":"\ud83c\udf4e macOS","text":""},{"location":"instalacion-uv/#opcion-1-con-homebrew","title":"Opci\u00f3n 1: Con Homebrew","text":"<pre><code>brew install astral-sh/uv/uv\n</code></pre>"},{"location":"instalacion-uv/#opcion-2-script-oficial","title":"Opci\u00f3n 2: Script oficial","text":"<pre><code>curl -Ls https://astral.sh/uv/install.sh | bash\n</code></pre> <p>Verifica la instalaci\u00f3n:</p> <pre><code>uv --version\n</code></pre>"},{"location":"instalacion-uv/#windows","title":"\ud83e\ude9f Windows","text":"<ol> <li>Abre PowerShell como administrador.</li> <li>Ejecuta:</li> </ol> <pre><code>irm https://astral.sh/uv/install.ps1 | iex\n</code></pre> <ol> <li>Cierra y vuelve a abrir la terminal para que se reconozca el comando <code>uv</code>.</li> </ol> <p>Verifica:</p> <pre><code>uv --version\n</code></pre>"},{"location":"instalacion-uv/#crear-un-entorno-virtual-con-uv","title":"\ud83e\uddea Crear un entorno virtual con <code>uv</code>","text":"<pre><code>uv venv\nsource .venv/bin/activate  # Linux/macOS\n.venv\\Scripts\\activate   # Windows\n</code></pre>"},{"location":"instalacion-uv/#instalar-dependencias","title":"\ud83d\udce6 Instalar dependencias","text":"<pre><code>uv pip install chalice\n</code></pre> <p>Para congelar dependencias:</p> <pre><code>uv pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"instalacion-uv/#actualizar-uv","title":"\ud83d\udd01 Actualizar <code>uv</code>","text":"<pre><code>uv self-update\n</code></pre>"},{"location":"instalacion-uv/#desinstalar-uv","title":"\u274c Desinstalar <code>uv</code>","text":"<p>Borra el ejecutable desde el directorio donde fue instalado (por defecto en <code>~/.cargo/bin</code> o <code>%USERPROFILE%\\.cargo\\bin</code>).</p>"},{"location":"mini-demo/","title":"Mini demo","text":"<p>C\u00f3digo ejemplo que combina Lambda + API Gateway + DynamoDB</p> <p>Resultado final</p>"},{"location":"python-serverless/","title":"\ud83d\udc0d Python + \u26a1 Serverless","text":""},{"location":"python-serverless/#por-que-combinar-python-con-tecnologias-serverless","title":"\u00bfPor qu\u00e9 combinar Python con tecnolog\u00edas Serverless?","text":"<p>Combinar Python con una arquitectura serverless acelera el desarrollo de soluciones backend modernas, eliminando la necesidad de administrar servidores. Te enfocas en lo importante: escribir c\u00f3digo y desplegarlo de forma r\u00e1pida y escalable.</p>"},{"location":"python-serverless/#ventajas-clave","title":"\u2705 Ventajas clave","text":"<ul> <li> <p>\ud83d\ude80 Rapidez en el desarrollo   Python es un lenguaje simple, legible y con una gran variedad de librer\u00edas. Permite implementar l\u00f3gica de negocio con menos c\u00f3digo y en menos tiempo.</p> </li> <li> <p>\u2699\ufe0f Despliegue simplificado   Con tecnolog\u00edas y frameworks Serverless, puedes desplegar funciones Lambda con un solo comando, incluyendo:</p> </li> <li>configuraci\u00f3n de API Gateway</li> <li>permisos IAM</li> <li> <p>recursos como DynamoDB, S3, entre otros.</p> </li> <li> <p>\ud83d\udcc8 Escalabilidad autom\u00e1tica   AWS Lambda escala horizontalmente de forma autom\u00e1tica. No importa si tienes 1 o 1 mill\u00f3n de peticiones: no necesitas ajustar nada.</p> </li> <li> <p>\ud83d\udcb0 Costos eficientes   Pagas solo por el tiempo que se ejecuta tu funci\u00f3n. No hay costos por servidores inactivos o subutilizados.</p> </li> <li> <p>\ud83e\udde9 Modularidad   Cada funci\u00f3n puede representar una unidad peque\u00f1a y especializada. Esto promueve una arquitectura limpia, desacoplada y f\u00e1cil de mantener.</p> </li> </ul>"},{"location":"python-serverless/#conclusion","title":"\ud83e\udde0 Conclusi\u00f3n","text":"<p>\ud83d\udca1 Python + Serverless = Productividad moderna</p> <p>Esta combinaci\u00f3n permite desarrollar APIs resilientes, altamente disponibles, y f\u00e1ciles de mantener, alineadas con las buenas pr\u00e1cticas de DevOps, CI/CD y arquitecturas modernas basadas en eventos.</p>"},{"location":"recomendaciones-apis/","title":"Preparaci\u00f3n del entorno de desarrollo","text":"<p>Herramientas recomendadas y buenas pr\u00e1cticas para desarrollar y exponer APIs Serverless.</p>"},{"location":"recomendaciones-apis/#usa-un-entorno-linux-o-similar","title":"\ud83d\udc27 Usa un entorno Linux (o similar)","text":"<ul> <li>Se recomienda trabajar en Linux, macOS o WSL2 en Windows para facilitar la compatibilidad con herramientas de desarrollo modernas.</li> <li>Linux/WSL2 mejora el soporte de Docker, Python, Git, y herramientas de red.</li> </ul>"},{"location":"recomendaciones-apis/#usa-entornos-virtuales-con-uv-o-venv","title":"\ud83d\udc0d Usa entornos virtuales con <code>uv</code> o <code>venv</code>","text":"<ul> <li>A\u00edsla las dependencias del proyecto usando entornos virtuales.</li> <li>Recomendado Python 3.10 o superior.</li> <li>Recomendado: <code>uv</code> por su velocidad y compatibilidad.</li> <li>Instalaci\u00f3n <code>uv</code> </li> </ul> <pre><code># Crear entorno virtual con uv\nuv venv\n# Activar el entorno virtual dentro del folder contenedor del .venv\nsource .venv/bin/activate\n# Desactivar\ndeactivate\n</code></pre> <ul> <li>Alternativa tradicional virtual environment: <pre><code># Crear entorno virtual\npython3 -m venv .venv\n# Activar el entorno virtual dentro del folder contenedor del .venv\nsource .venv/bin/activate\n# Desactivar\ndeactivate\n</code></pre></li> </ul>"},{"location":"recomendaciones-apis/#configuracion-de-aws","title":"\u2699\ufe0f Configuraci\u00f3n de AWS","text":"<ul> <li>Configuraci\u00f3n <code>AWS</code></li> </ul> <pre><code>aws configure\n# enter AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, region\n</code></pre>"},{"location":"recomendaciones-apis/#observabilidad","title":"\ud83d\udcc8 Observabilidad","text":"<ul> <li>Usa logs estructurados.</li> <li>Agrega monitoreo con herramientas como:</li> <li>Prometheus + Grafana</li> <li>Sentry, Datadog, AWS CloudWatch</li> </ul>"},{"location":"recomendaciones-apis/#buenas-practicas-adicionales","title":"\u2705 Buenas pr\u00e1cticas adicionales","text":"<ul> <li>Usa <code>.env</code> y no subas claves sensibles al repositorio.</li> <li>Usa Git con ramas bien definidas (<code>main</code>, <code>dev</code>, <code>feature/*</code>).</li> <li>Automatiza despliegues con CI/CD (GitHub Actions, GitLab CI, etc.).</li> </ul>"},{"location":"referencias/","title":"Referencias","text":""},{"location":"referencias/#recursos","title":"\ud83d\udcda Recursos","text":""},{"location":"referencias/#python","title":"\ud83d\udc0d Python","text":"<ul> <li>Documentaci\u00f3n oficial de Python (en espa\u00f1ol)   Explorar conceptos fundamentales del lenguaje, desde estructuras b\u00e1sicas hasta programaci\u00f3n orientada a objetos.</li> </ul>"},{"location":"referencias/#apis","title":"\ud83d\udd17 APIs","text":"<ul> <li>\u00bfQu\u00e9 es una API RESTful?   Comprender el concepto de API, sus componentes y c\u00f3mo se integran con servicios web modernos.</li> </ul>"},{"location":"referencias/#aws-amazon-web-services","title":"\u2601\ufe0f AWS (Amazon Web Services)","text":"<ul> <li>Sitio oficial de AWS   Consultar productos, soluciones en la nube, precios y recursos de aprendizaje.</li> </ul>"},{"location":"referencias/#aws-sam-serverless-application-model","title":"\ud83d\udee0\ufe0f AWS SAM (Serverless Application Model)","text":"<ul> <li> <p>Instalar AWS SAM CLI   Gu\u00eda oficial para instalar la herramienta CLI de SAM.</p> </li> <li> <p>Ejemplo 'Hello World'   Comenzar con un proyecto b\u00e1sico para desplegar una funci\u00f3n Lambda usando SAM.</p> </li> </ul>"},{"location":"referencias/#aws-serverless","title":"\u26a1 AWS Serverless","text":"<ul> <li>Tecnolog\u00edas y casos de uso   Descubrir c\u00f3mo construir aplicaciones sin servidores y ejemplos reales de aplicaci\u00f3n.</li> </ul>"},{"location":"referencias/#chalice","title":"\u2699\ufe0f Chalice","text":"<ul> <li>Gu\u00eda r\u00e1pida de inicio Chalice   Aprender a crear y desplegar APIs en AWS Lambda utilizando este microframework para Python.</li> </ul>"},{"location":"referencias/#serverless-framework","title":"\ud83c\udf10 Serverless Framework","text":"<ul> <li>Documentaci\u00f3n oficial del Serverless Framework   Consultar c\u00f3mo utilizar esta poderosa herramienta para automatizar despliegues en la nube con m\u00faltiples proveedores.</li> </ul>"},{"location":"referencias/#repositorio-del-taller","title":"\ud83d\udcc1 Repositorio del taller","text":"<ul> <li>Acceder al repositorio en GitHub   Ver ejemplos, ejercicios y materiales del taller.</li> </ul>"},{"location":"referencias/#linkedin","title":"LinkedIn","text":"<p>Christian Abrajan</p>"},{"location":"serverless-framework/","title":"Instalaci\u00f3n, configuraci\u00f3n y despliegue","text":""},{"location":"serverless-framework/#introduccion-al-framework","title":"Introducci\u00f3n al framework","text":"<p>Serverless Framework es una herramienta de infraestructura como c\u00f3digo (IaC) que permite crear, configurar y desplegar aplicaciones serverless (sin servidor) sobre m\u00faltiples proveedores en la nube \u2014 principalmente AWS, pero tambi\u00e9n Azure, Google Cloud, entre otros.</p> <ul> <li>Es uno de los frameworks m\u00e1s maduros y usados para Lambda + API Gateway.</li> </ul>"},{"location":"serverless-framework/#instalacion-de-serverless-framework","title":"Instalaci\u00f3n de Serverless Framework","text":"<p>Serverless Framework es una herramienta de c\u00f3digo abierto que facilita el desarrollo, despliegue y operaci\u00f3n de aplicaciones serverless (sin servidor), especialmente con AWS Lambda.</p> <p>Requisitos previos Antes de instalar Serverless Framework, necesitas:</p> <ul> <li> <p>\u2705 Tener instalado Node.js (v14 o superior recomendado)</p> </li> <li> <p>\u2705 Tener instalado npm (v6 o superior)</p> </li> <li> <p>\u2705 Tener una cuenta de AWS con credenciales configuradas (aws configure)</p> </li> </ul> <p>Puedes verificar si tienes Node.js y npm con: <pre><code>node -v\nnpm -v\n</code></pre></p>"},{"location":"serverless-framework/#requisitos-previos","title":"Requisitos previos","text":"<p>Antes de instalar Chalice, aseg\u00farate de tener instalado lo siguiente:</p> <ul> <li> <p>\u2705 Python 3.7 o superior</p> </li> <li> <p>\u2705 pip (el gestor de paquetes de Python)</p> </li> <li> <p>\u2705 Una cuenta de AWS (capa libre) con credenciales configuradas (aws configure)</p> </li> <li> <p>\u2705 Git (opcional, pero recomendado)</p> </li> </ul>"},{"location":"serverless-framework/#crear-un-entorno-virtual-opcional-pero-recomendado","title":"Crear un entorno virtual (opcional, pero recomendado)","text":"<p><pre><code>python3 -m venv .venv\nuv venv #si deseas usar uv\nsource .venv/bin/activate  # En Linux o macOS\n.venv\\Scripts\\activate     # En Windows\n</code></pre> <pre><code>npm install -g serverless\n</code></pre> Verifica la instalaci\u00f3n:</p> <p><pre><code>serverless --version\nSalida esperada:\n</code></pre> <pre><code>Framework Core: 3.x.x\nPlugin: 6.x.x\nSDK: 4.x.x\n</code></pre> Tambi\u00e9n puedes usar el comando abreviado:</p> <pre><code>sls --version\n</code></pre>"},{"location":"serverless-framework/#crear-un-nuevo-proyecto-serverless","title":"Crear un nuevo proyecto Serverless","text":"<pre><code>serverless create --template aws-python --path mi-api-serverless\ncd mi-api-python\n</code></pre>"},{"location":"serverless-framework/#serverlessyml-explicado","title":"serverless.yml explicado","text":"<p>El archivo serverless.yml define toda la aplicaci\u00f3n: <pre><code>service: my-api-python\n\nprovider:\n  name: aws\n  runtime: python3.11\n  region: us-east-1\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n</code></pre> Explicaci\u00f3n r\u00e1pida:</p> <ul> <li> <p>service: nombre del proyecto</p> </li> <li> <p>provider: nube objetivo (AWS), runtime, regi\u00f3n</p> </li> <li> <p>functions: lista de funciones Lambda</p> </li> <li> <p>handler: ruta al archivo y funci\u00f3n (handler.py \u2192 def hello)</p> </li> <li> <p>events: c\u00f3mo se activa (en este caso, con HTTP v\u00eda API Gateway)</p> </li> </ul>"},{"location":"serverless-framework/#comandos-clave-sls-create-sls-deploy","title":"Comandos clave: sls create, sls deploy","text":"<pre><code># Crear un nuevo proyecto con template\nsls create --template aws-python --path my-api\ncd my-api\n\n# Instalar dependencias necesarias\npip install -r requirements.txt\n\n# Desplegar la aplicaci\u00f3n\nsls deploy\n\n# Invocar una funci\u00f3n manualmente\nsls invoke -f hello\n\n# Ver logs en vivo\nsls logs -f hello -t\n\n# Eliminar la aplicaci\u00f3n del entorno AWS\nsls remove\n</code></pre>"},{"location":"serverless-framework/#estructura-tipica-del-proyecto","title":"Estructura t\u00edpica del proyecto","text":"<p><pre><code>my-api/\n\u251c\u2500\u2500 handler.py            # Funciones Lambda\n\u251c\u2500\u2500 serverless.yml        # Infraestructura y eventos\n\u251c\u2500\u2500 requirements.txt      # Dependencias Python\n\u2514\u2500\u2500 .serverless/          # Archivos empaquetados para despliegue (auto)\n</code></pre> Ejemplo de handler.py: <pre><code>def hello(event, context):\n    return {\n        \"statusCode\": 200,\n        \"body\": \"Hola PyCon Colombia 2025\"\n    }\n</code></pre></p>"},{"location":"serverless-framework/#instala-dependencias-si-es-necesario","title":"Instala dependencias si es necesario:","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"serverless-framework/#desplegar-aws","title":"Desplegar AWS","text":"<pre><code>sls deploy\n</code></pre>"},{"location":"serverless-framework/#salida","title":"Salida","text":"<pre><code>endpoints:\n  GET - https://xxxxx.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: mi-api-serverless-dev-hello\n</code></pre>"},{"location":"serverless-framework/#invocar-la-funcion-desde-la-linea-de-comandos","title":"Invocar la funci\u00f3n desde la l\u00ednea de comandos","text":"<pre><code>sls invoke -f hello\n</code></pre>"},{"location":"serverless-framework/#eliminar-los-recursos-de-aws","title":"Eliminar los recursos de AWS","text":"<p><pre><code>sls remove\n</code></pre> Esto borra todos los recursos creados (Lambda, API Gateway, roles, etc.).</p>"},{"location":"serverless/","title":"\u26a1 \u00bfQu\u00e9 es Serverless?","text":""},{"location":"serverless/#arquitectura-serverless","title":"\ud83c\udfd7\ufe0f Arquitectura Serverless","text":"<p>A diferencia del enfoque tradicional basado en servidores, Serverless permite que tu c\u00f3digo se ejecute sin necesidad de administrar infraestructura f\u00edsica o virtual.</p> <p>En este modelo, simplemente:</p> <ul> <li>\u270d\ufe0f Escribes funciones que responden a eventos (como peticiones HTTP, cargas a S3 o mensajes en colas).</li> <li>\u2601\ufe0f Las despliegas en la nube usando herramientas como Serverless Framework o AWS SAM.</li> <li>\ud83d\udd04 La infraestructura se gestiona autom\u00e1ticamente por el proveedor (por ejemplo, AWS Lambda).</li> </ul> <p>!!! tip \"Lo importante\"     En Serverless, te enfocas solo en el c\u00f3digo y la l\u00f3gica de negocio, mientras que la infraestructura, escalabilidad y disponibilidad son manejadas por la nube.</p>"},{"location":"serverless/#ventajas-clave-de-serverless","title":"\u2705 Ventajas clave de Serverless","text":"<ul> <li> <p>\ud83e\udde9 Sin administraci\u00f3n de servidores   No necesitas configurar, mantener ni escalar servidores f\u00edsicos o virtuales.</p> </li> <li> <p>\ud83d\udcc8 Escalabilidad autom\u00e1tica AWS Lambda ajusta autom\u00e1ticamente los recursos seg\u00fan la demanda, sin intervenci\u00f3n manual.</p> </li> <li> <p>\ud83d\udcb8 Modelo de pago por uso   Pagas solo por el tiempo real de ejecuci\u00f3n. No hay costos por servidores inactivos.</p> </li> <li> <p>\ud83d\ude80 Despliegue r\u00e1pido y sencillo   Herramientas como Serverless Framework permiten desplegar APIs y funciones en minutos.</p> </li> <li> <p>\ud83d\udee1\ufe0f Alta disponibilidad y tolerancia a fallos   AWS maneja autom\u00e1ticamente la disponibilidad y recuperaci\u00f3n ante fallos.</p> </li> <li> <p>\ud83e\udde0 Mejor enfoque en la l\u00f3gica de negocio   Puedes dedicar tu tiempo a escribir c\u00f3digo y no a preocuparte por infraestructura.</p> </li> </ul>"},{"location":"serverless/#casos-de-uso-ideales-para-serverless","title":"\ud83c\udfaf Casos de uso ideales para Serverless","text":""},{"location":"serverless/#apis-restful-y-microservicios","title":"\ud83d\udd17 APIs RESTful y Microservicios","text":"<p>Ideal para construir APIs ligeras, modulares y escalables. Cada endpoint puede mapearse a una funci\u00f3n Lambda independiente.</p>"},{"location":"serverless/#procesamiento-de-datos-en-tiempo-real","title":"\ud83d\udcca Procesamiento de datos en tiempo real","text":"<p>Captura eventos desde S3, Kinesis o DynamoDB Streams. \u00datil para an\u00e1lisis de logs, transcodificaci\u00f3n, alertas o an\u00e1lisis en vivo.</p>"},{"location":"serverless/#tareas-programadas-cron-jobs","title":"\u23f0 Tareas programadas (cron jobs)","text":"<p>Automatiza tareas peri\u00f3dicas como: - Limpieza de datos - Generaci\u00f3n de reportes - Sincronizaci\u00f3n de sistemas</p>"},{"location":"serverless/#chatbots-y-asistentes-virtuales","title":"\ud83e\udd16 Chatbots y asistentes virtuales","text":"<p>Ejecuta funciones Lambda en respuesta a interacciones con usuarios o servicios sin necesidad de servidores activos constantemente.</p>"},{"location":"serverless/#automatizacion-de-flujos-en-la-nube","title":"\u2699\ufe0f Automatizaci\u00f3n de flujos en la nube","text":"<p>Reacciona a eventos dentro de AWS (como carga de archivos en S3) para activar procesos autom\u00e1ticos entre servicios.</p> <p>\"En resumen\"     Serverless no es solo una tecnolog\u00eda, sino un cambio de paradigma: menos infraestructura, m\u00e1s foco en el valor del negocio.</p>"},{"location":"tecnologias/","title":"Tecnolog\u00edas Serverless de AWS","text":"<p>AWS ofrece una amplia gama de servicios serverless que permiten construir aplicaciones sin necesidad de gestionar servidores. A continuaci\u00f3n, se describen algunas de las tecnolog\u00edas clave que puedes utilizar para crear soluciones modernas, escalables y eficientes.</p>"},{"location":"tecnologias/#lambda-codigo-sin-servidores","title":"Lambda: c\u00f3digo sin servidores","text":"<p>AWS Lambda te permite ejecutar c\u00f3digo sin aprovisionar ni administrar servidores. Solo cargas tu funci\u00f3n, defines un desencadenador (como una solicitud HTTP, un evento de base de datos o un archivo nuevo en S3), y Lambda ejecuta el c\u00f3digo bajo demanda.</p> <ul> <li>Soporta m\u00faltiples lenguajes: Python, Node.js, Go, Java, .NET, Ruby, etc.</li> <li>Escala autom\u00e1ticamente seg\u00fan la demanda.</li> <li>Se cobra solo por el tiempo de ejecuci\u00f3n y la cantidad de invocaciones.</li> </ul> <p>Casos de uso comunes: - Backend para APIs - Automatizaci\u00f3n de tareas - Procesamiento de archivos - Validaci\u00f3n y transformaci\u00f3n de datos</p>"},{"location":"tecnologias/#api-gateway-crea-tus-endpoints","title":"API Gateway: crea tus endpoints","text":"<p>Amazon API Gateway permite crear, publicar, mantener y proteger APIs REST, HTTP y WebSocket. Es el punto de entrada ideal para tus aplicaciones serverless.</p> <ul> <li>Integra directamente con Lambda, DynamoDB, Step Functions, y otros servicios.</li> <li>Soporte para autenticaci\u00f3n (IAM, Cognito, API Keys).</li> <li>Capacidad para limitar el tr\u00e1fico (rate limiting), cacheo de respuestas, y transformaci\u00f3n de payloads.</li> </ul> <p>Casos de uso comunes: - Crear APIs RESTful para frontend web o m\u00f3vil - WebSocket para comunicaci\u00f3n en tiempo real - Versionado y monitoreo de APIs</p>"},{"location":"tecnologias/#dynamodb-persistencia-sin-servidor","title":"DynamoDB: persistencia sin servidor","text":"<p>Amazon DynamoDB es una base de datos NoSQL completamente administrada, r\u00e1pida y flexible. Est\u00e1 dise\u00f1ada para cargas de trabajo de baja latencia y alto rendimiento.</p> <ul> <li>Modelo de datos basado en tablas, \u00edtems y atributos.</li> <li>Soporte para claves primarias compuestas y acceso por \u00edndices secundarios.</li> <li>Integraci\u00f3n perfecta con Lambda para arquitecturas serverless.</li> </ul> <p>Ventajas clave: - Escalado autom\u00e1tico (On-Demand Mode) - Alta disponibilidad y replicaci\u00f3n multi-regi\u00f3n - TTL, Streams, y acceso condicional</p> <p>Casos de uso comunes: - Almacenamiento de usuarios, sesiones o cat\u00e1logos - Backend de aplicaciones m\u00f3viles o juegos - Registro de eventos (logs, m\u00e9tricas)</p>"},{"location":"verificacion-entorno/","title":"Verificaci\u00f3n del entorno","text":"<p>Antes de comenzar a desarrollar y desplegar APIs Serverless, es importante verificar que todas las herramientas est\u00e9n correctamente instaladas y configuradas.</p>"},{"location":"verificacion-entorno/#1-verificacion-de-herramientas-instaladas","title":"1. Verificaci\u00f3n de herramientas instaladas","text":""},{"location":"verificacion-entorno/#python","title":"Python","text":"<pre><code>python --version\n</code></pre>"},{"location":"verificacion-entorno/#pip-o-uv","title":"pip o uv","text":"<pre><code>pip --version\n# o\nuv --version\n</code></pre>"},{"location":"verificacion-entorno/#aws-cli","title":"AWS CLI","text":"<pre><code>aws --version\n</code></pre>"},{"location":"verificacion-entorno/#2-verificacion-de-credenciales-aws","title":"2. Verificaci\u00f3n de credenciales AWS","text":"<p>Verifica que tus credenciales est\u00e1n configuradas correctamente:</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>Salida similar esperada: <pre><code>{\n    \"UserId\": \"AIDAZI2LFSDAHYYXVQXR\",\n    \"Account\": \"637429087588\",\n    \"Arn\": \"arn:aws:iam::637429087588:user/userlogin\"\n}\n</code></pre></p>"},{"location":"verificacion-entorno/#3-verificacion-de-permisos-y-region-por-defecto","title":"3. Verificaci\u00f3n de permisos y regi\u00f3n por defecto","text":"<p><pre><code>aws configure list\n</code></pre> Salida similar esperada: <pre><code>      Name                    Value             Type    Location\n      ----                    -----             ----    --------\naccess_key     ****************RDRJ shared-credentials-file    \nsecret_key     ****************kl+H shared-credentials-file    \n    region                us-west-1      config-file    ~/.aws/config\n</code></pre></p>"},{"location":"verificacion-entorno/#pruebas-automaticas-opcional","title":"Pruebas autom\u00e1ticas (opcional)","text":"<ul> <li>Introduce pytest u otra herramienta para probar funciones Lambda de forma aislada.</li> </ul>"},{"location":"verificacion-entorno/#monitoreo-desde-aws-opcional","title":"Monitoreo desde AWS (opcional)","text":"<ul> <li> <p>CloudWatch Logs</p> </li> <li> <p>Revisar logs de ejecuci\u00f3n</p> </li> <li> <p>M\u00e9tricas de invocaci\u00f3n</p> </li> </ul> <pre><code>aws logs describe-log-groups\naws logs get-log-events --log-group-name ...\n</code></pre>"}]}